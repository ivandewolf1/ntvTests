void multiTest(UT_Vector3D *vecA, UT_Vector3D *vecB, float scalar) {
    ntv::nvec3<float> constr1;
    std::cout << "firstConstructor: " << constr1 << std::endl;
    ntv::nvec3<float> constr2(1.2,3.4,5.6);
    std::cout << "secondConstructor: " << constr2 << std::endl;
    ntv::nvec3<float> constr3(7.8);
    std::cout << "thirdConstructor: " << constr3 << std::endl;
    ntv::nvec3<float> constr4(constr2);
    std::cout << "fourthConstructor: " << constr4 << std::endl;
    std::cout << " []: " << constr4[0] << " " << constr4[1] << " " << constr4[2] << std::endl;
    constr4[1] = 3.141592694;
    std::cout << " []: " << constr4[0] << " " << constr4[1] << " " << constr4[2] << std::endl;
    constr1.set(1,2,3);
    std::cout << "set: " << constr1 << std::endl;
    ntv::nvec3<float> NTV_A(vecA->x(),vecA->y(),vecA->z());
    ntv::nvec3<float> NTV_B(vecB->x(),vecB->y(),vecB->z());
    constr1 += NTV_A;
    std::cout << "nvec3 += nvec3: " << constr1<< std::endl;
    constr1.set(1,2,3);
    constr1 -= NTV_A;
    std::cout << "nvec3 -= nvec3: " << constr1<< std::endl;
    constr1.set(1,2,3);
    constr1 *= NTV_A;
    std::cout << "nvec3 *= nvec3: " << constr1<< std::endl;
    constr1.set(1,2,3);
    constr1 /= NTV_A;
    std::cout << "nvec3 /= nvec3: " << constr1<< std::endl;
    constr1.set(1,2,3);
    constr1 *= scalar;
    std::cout << "nvec3 *= scalar: " << constr1<< std::endl;
    constr1.set(1,2,3);
    constr1 /= scalar;
    std::cout << "/= scalar: " << constr1<< std::endl;
    std::cout << "negative: " << -constr1<< std::endl;
    std::cout << "A+B" << NTV_A+NTV_B << std::endl;
    std::cout << "A-B" << NTV_A-NTV_B << std::endl;
    std::cout << "A*B" << NTV_A*NTV_B << std::endl;
    std::cout << "A/B" << NTV_A/NTV_B << std::endl;
    constr1 = NTV_A;
    std::cout << "c=A" << constr1 << std::endl;
    std::cout << "A+scalar" << NTV_A+scalar << std::endl;
    std::cout << "scalar+A" << scalar+NTV_A << std::endl;
    std::cout << "A-scalar" << NTV_A-scalar << std::endl;
    std::cout << "scalar-A" << scalar-NTV_A << std::endl;
    std::cout << "A*scalar" << NTV_A*scalar << std::endl;
    std::cout << "scalar*A" << scalar*NTV_A << std::endl;
    std::cout << "A/scalar" << NTV_A/scalar << std::endl;
    std::cout << "scalar/A" << scalar/NTV_A << std::endl;
    std::cout << "A==B: " << int(NTV_A==NTV_B) << std::endl;
    std::cout << "A!=B: " << int(NTV_A!=NTV_B) << std::endl;
    std::cout << "A.length2(): " << NTV_A.length2() << std::endl;
    std::cout << "A.length(): " << NTV_A.length() << std::endl;
    constr1 = NTV_A;
    constr1.normalize();
    std::cout << "A.normalize(): " << constr1 << std::endl;
    std::cout << "A.normalized(): " << NTV_A.normalized() << std::endl;
    std::cout << "A.dot(B): " << NTV_A.dot(NTV_B) << std::endl;
    std::cout << "A.cross(B): " << NTV_A.cross(NTV_B) << std::endl;
    std::cout << "A.lerp(B,tau): " << NTV_A.lerp(NTV_B,scalar) << std::endl;
    std::cout << "A.almostEqual(B, .001): " << int(NTV_A.almostEqual(NTV_B, .001)) << std::endl;
    /*std::cout << "A.reflect(N): " << NTV_A.reflect(NTV_B) << std::endl;
    std::cout << "A.abs(): " << NTV_A.abs() << std::endl;
    std::cout << "A.min(B): " << NTV_A.min(NTV_B) << std::endl;
    std::cout << "A.max(B): " << NTV_A.max(NTV_B) << std::endl;
    std::cout << "A.clamp(B,C): " << NTV_A.clamp(NTV_B,NTV_B) << std::endl; */
}

